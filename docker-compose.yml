# Personal AI System - Master Docker Orchestration
# Version: 1.0
# Date: October 31, 2025
#
# This compose file orchestrates all microservices in the Personal AI Infrastructure.
# It should be deployed on the Raspberry Pi home server (pi@192.168.5.190).
#
# Services:
# - health-service: Apple Health + Parkrun data (Port 3001)
# - claude-agent-server: AI agent orchestration with UFC context (Port 3002)
# - owntracks-api: Location tracking service (Port 8083)
# - nginx: Reverse proxy with SSL termination (Ports 80, 443)
#
# Network:
# - personal-ai: Shared bridge network enabling service-to-service communication
#
# Usage:
#   docker-compose up -d           # Start all services
#   docker-compose down            # Stop all services
#   docker-compose logs -f [service]  # View logs
#   docker-compose ps              # View service status

version: '3.8'

networks:
  personal-ai:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # ============================================================================
  # Health Service
  # ============================================================================
  # Provides Apple Health + Parkrun data access
  # Repository: gavraq/health-service
  # API Docs: http://localhost:3001/api-docs

  health-service:
    build: ./services/health-service
    container_name: health-service
    restart: unless-stopped
    hostname: health-service

    ports:
      - "3001:3001"

    volumes:
      # Database storage (1.7GB, 5.3M records)
      - ./services/health-service/data:/app/data

      # Service logs
      - ./services/health-service/logs:/app/logs

      # Environment configuration
      - ./services/health-service/.env:/app/.env:ro

    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
      - DB_PATH=/app/data/health.db

    networks:
      personal-ai:
        ipv4_address: 172.20.0.10

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Claude Agent Server
  # ============================================================================
  # AI agent orchestration with UFC context loading
  # Repository: gavraq/claude-agent-server
  # WebSocket: wss://agent.gavinslater.com/ws

  claude-agent-server:
    build: ./services/claude-agent-server
    container_name: claude-agent-server
    restart: unless-stopped
    hostname: claude-agent-server

    ports:
      - "3002:3002"

    volumes:
      # UFC Context (Universal File Context) - Read-only
      - ./.claude/context:/ufc:ro
      - ./.claude:/claude-config:ro

      # Agent logs
      - ./services/claude-agent-server/logs:/app/logs

    environment:
      - NODE_ENV=production
      - PORT=3002
      - LOG_LEVEL=info

      # Anthropic API
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

      # JWT for WebSocket authentication
      - JWT_SECRET=${JWT_SECRET}

      # Service URLs (internal Docker network)
      - HEALTH_SERVICE_URL=http://health-service:3001
      - LOCATION_SERVICE_URL=http://owntracks-api:8083

      # UFC Context paths
      - UFC_CONTEXT_PATH=/ufc
      - UFC_CONFIG_PATH=/claude-config

    networks:
      personal-ai:
        ipv4_address: 172.20.0.20

    depends_on:
      health-service:
        condition: service_healthy
      owntracks-api:
        condition: service_started

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # Owntracks API (Location Service)
  # ============================================================================
  # Location tracking and geolocation history
  # External Repository: owntracks/docker-recorder
  # API: http://localhost:8083/api

  owntracks-api:
    image: owntracks/recorder:latest
    container_name: owntracks-api
    restart: unless-stopped
    hostname: owntracks-api

    ports:
      - "8083:8083"

    volumes:
      # Owntracks data storage
      - ./services/location-service/owntracks/store:/store

      # Configuration
      - ./services/location-service/owntracks/config:/config:ro

    environment:
      - OTR_HOST=0.0.0.0
      - OTR_PORT=8083
      - OTR_STORAGEDIR=/store

    networks:
      personal-ai:
        ipv4_address: 172.20.0.30

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/0/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # NGINX Reverse Proxy (Optional - for SSL termination)
  # ============================================================================
  # Routes external requests to internal services
  # - agent.gavinslater.com → claude-agent-server:3002
  # - health.gavinslater.com → health-service:3001
  # - location.gavinslater.com → owntracks-api:8083

  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      # NGINX configuration
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro

      # SSL certificates (Let's Encrypt)
      - ./config/nginx/ssl:/etc/nginx/ssl:ro

      # Logs
      - ./logs/nginx:/var/log/nginx

    networks:
      personal-ai:
        ipv4_address: 172.20.0.100

    depends_on:
      - claude-agent-server
      - health-service
      - owntracks-api

    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ============================================================================
# Notes
# ============================================================================
#
# ## Service Dependencies
# - claude-agent-server depends on health-service and owntracks-api
# - nginx depends on all backend services
#
# ## Network Configuration
# - All services on personal-ai bridge network (172.20.0.0/16)
# - Static IP assignments for reliable service discovery
# - Internal DNS: service names resolve to container IPs
#
# ## Volume Mounts
# - UFC context is read-only for security
# - Service logs persist to host for analysis
# - Database files persist to host for backup
#
# ## Environment Variables
# Required in .env file at project root:
# - ANTHROPIC_API_KEY=sk-ant-xxx
# - JWT_SECRET=your-secure-jwt-secret
#
# ## Health Checks
# - All services have health checks for monitoring
# - Health checks prevent premature dependency startup
# - Unhealthy containers trigger automatic restart
#
# ## Logging
# - All services use JSON log driver
# - Logs rotate at 10MB, keep 3 files
# - View logs: docker-compose logs -f [service]
#
# ## Service URLs (Internal Docker Network)
# - health-service: http://health-service:3001
# - claude-agent-server: http://claude-agent-server:3002
# - owntracks-api: http://owntracks-api:8083
#
# ## External Access (via NGINX)
# - agent.gavinslater.com → claude-agent-server (WSS)
# - health.gavinslater.com → health-service (HTTPS)
# - location.gavinslater.com → owntracks-api (HTTPS)
#
# ## Deployment
# 1. Copy this file to Pi: ~/docker/personal-ai-system/docker-compose.yml
# 2. Create .env file with required variables
# 3. Clone service repositories to services/ directory
# 4. Run: docker-compose up -d
# 5. Verify: docker-compose ps
# 6. Test connectivity: docker exec claude-agent-server curl http://health-service:3001/health
#
# ============================================================================
